# .github/workflows/dotnet-desktop.yml

name: WinUI 3 MSIX Build and Intune Package

on:
  push:
    branches: [ "master" ] # Or your primary branch
  pull_request:
    branches: [ "master" ] # Or your primary branch

jobs:
  build_and_package: # Combined job name for clarity
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64] # Add x86 or arm64 if you need to build for those platforms

    runs-on: windows-latest

    env:
      Solution_Name: SupportHubApp.sln
      Project_Path: SupportHubApp\SupportHubApp.csproj
      # Test_Project_Path: YourTestProject\YourTestProject.csproj # Optional
      Project_Dir: ${{ github.workspace }}\SupportHubApp
      Certificate_File_Name: GitHubActionsWorkflow.pfx
      # --- New env vars for clarity ---
      TEMPLATE_SOURCE_DIR: deployment/scriptTemplates
      PROCESSED_SCRIPTS_DIR: deployment/processedScripts
      APP_SOURCE_TEMP_DIR: app_source_tmp # Temporary folder for MSIX staging
      INTUNE_OUTPUT_BUNDLE_NAME: SupportHub_IntunePackage
      INTUNE_SOURCE_BUNDLE_NAME: SupportHub_IntunePackage_Source
      APP_NAME_BASE: SupportHubApp

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion if used, otherwise set to 1 for speed

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.311 # Match your project's target
        cache: false

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Optional: Execute unit tests if configured
    # - name: Execute unit tests
    #   if: env.Test_Project_Path != 'YourTestProject\YourTestProject.csproj' # Only run if path is configured
    #   run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}
      # Alternative using solution: run: dotnet test ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    # Restore NuGet packages for the solution
    - name: Restore NuGet packages
      run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=${{ matrix.configuration }}

    - name: Decode PFX certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        New-Item -ItemType Directory -Force -Path $env:Project_Dir | Out-Null
        $certificatePath = Join-Path -Path $env:Project_Dir -ChildPath $env:Certificate_File_Name
        [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)
        echo "Decoded PFX certificate saved to $certificatePath"
        echo "CERTIFICATE_PATH=$certificatePath" >> $env:GITHUB_ENV

    - name: Build project and create MSIX package
      id: build_msix
      shell: pwsh
      run: |
        Write-Host "CWD: $(Get-Location)"
        $msbuildArgs = @(
            "${{ env.Project_Path }}",
            "/t:Publish",
            "/p:Configuration=${{ matrix.configuration }}",
            "/p:Platform=${{ matrix.platform }}",
            "/p:_GenerateMsixPackage=true",
            "/p:AppxPackageSigningEnabled=true",
            "/p:PackageCertificateKeyFile=${{ env.CERTIFICATE_PATH }}",
            # "/p:PackageCertificatePassword=${{ secrets.Pfx_Key }}", # Uncomment if needed
            "/p:SelfContained=true",
            "/getProperty:AppxPackageOutput", # Get full path
            "/getProperty:AppxManifestIdentityVersion", # Get version
            "/nologo", "/clp:NoSummary"
        )
        Write-Host "Running MSBuild: msbuild $($msbuildArgs -join ' ')"
        $msbuildOutput = msbuild $msbuildArgs | Out-String
        Write-Host "MSBuild Output:"; Write-Host $msbuildOutput
        try {
            $buildProps = $msbuildOutput | ConvertFrom-Json -ErrorAction Stop
            # Extract the specific properties
            $msixPath = $buildProps.Properties.AppxPackageOutput
            $appVersion = $buildProps.Properties.AppxManifestIdentityVersion
            if (-not $msixPath -or -not $appVersion) {
                Write-Error "Failed to parse required properties (AppxPackageOutput, AppxManifestIdentityVersion) from MSBuild JSON output."
                exit 1
            }

            # --- Corrected Path Calculation ---
            # Get the absolute path to the project directory
            # Use double quotes for evaluation and -Parent to get the directory
            $projectDirFullPath = Split-Path (Join-Path $env:GITHUB_WORKSPACE "${{ env.Project_Path }}") -Parent

            # Join the project directory path with the (assumed relative) msix path
            $msixAbsolutePath = Join-Path $projectDirFullPath $msixPath

            # Optional: Verify the path exists
            if (-not (Test-Path $msixAbsolutePath -PathType Leaf)) {
                 Write-Warning "Constructed MSIX absolute path '$msixAbsolutePath' not found or not a file. Check if AppxPackageOutput ('$msixPath') is relative to the project directory."
                 # If it fails, maybe the original path was already absolute? Output it instead.
                 $msixOutputPath = $msixPath
            } else {
                 $msixOutputPath = $msixAbsolutePath
            }
            # --- End Corrected Path Calculation ---

            Write-Host "MSIX Path Property: $msixPath"
            Write-Host "Using MSIX Path: $msixOutputPath"
            Write-Host "App Version Property: $appVersion"

            # Output the determined path for subsequent steps
            echo "msix_path=$msixOutputPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            echo "app_version=$appVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } catch {
            # This catch block is now only for ConvertFrom-Json errors
            Write-Error "Could not parse MSBuild output as JSON. Error: $_"; exit 1
        }

    - name: Remove PFX certificate file
      if: always()
      run: Remove-Item -Path "${{ env.CERTIFICATE_PATH }}" -Force -ErrorAction SilentlyContinue

    # --- Start Intune Packaging Steps ---

    - name: Prepare Template Variables
      id: prep_template_vars
      shell: pwsh
      run: |
        $msixFullPath = "${{ steps.build_msix.outputs.msix_path }}"
        $appVersion = "${{ steps.build_msix.outputs.app_version }}"
        $msixFileName = Split-Path -Path $msixFullPath -Leaf
        # Create the multiline variable string required by the process-templates action
        $variablesString = @"
        MSIX_FILE_NAME=$msixFileName
        APP_VERSION=$appVersion
        "@

        Write-Host "Template Variables Prepared:"
        Write-Host $variablesString

        # Output the variables using the heredoc syntax for GITHUB_OUTPUT
        echo "template_variables<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo $variablesString | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Process Script Templates
      # Use the local action you created
      # Ensure the path is correct relative to this workflow file's location
      uses: clstrickland/Template-Processor@v0.1
      with:
        source_directory: ${{ env.TEMPLATE_SOURCE_DIR }}
        destination_directory: ${{ env.PROCESSED_SCRIPTS_DIR }}
        template_extension: '.eps'
        variables: ${{ steps.prep_template_vars.outputs.template_variables }}

    - name: Prepare App Source Folder for Packaging
      id: prep_app_folder
      shell: pwsh
      run: |
        $msixFullPath = "${{ steps.build_msix.outputs.msix_path }}"
        $tempAppDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ env.APP_SOURCE_TEMP_DIR }}"

        Write-Host "Creating temporary app source folder: $tempAppDir"
        New-Item -Path $tempAppDir -ItemType Directory -Force | Out-Null

        Write-Host "Copying MSIX '$msixFullPath' to '$tempAppDir'"
        Copy-Item -Path $msixFullPath -Destination $tempAppDir -Force

        # Output the path to the temporary folder
        echo "app_folder_path=${{ env.APP_SOURCE_TEMP_DIR }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Package for Intune
      id: package_intune_app
      # Use the local action you created
      uses: clstrickland/Intune-Win32-Packager@v0.5
      with:
        app_source_folder_path: ${{ steps.prep_app_folder.outputs.app_folder_path }}
        install_script_path: "${{ env.PROCESSED_SCRIPTS_DIR }}/Install.ps1"
        uninstall_script_path: "${{ env.PROCESSED_SCRIPTS_DIR }}/Uninstall.ps1"
        detection_script_path: "${{ env.PROCESSED_SCRIPTS_DIR }}/Detect.ps1" # Assumes Detect.ps1.eps exists
        app_name: ${{ env.APP_NAME_BASE }}
        output_bundle_name: ${{ env.INTUNE_OUTPUT_BUNDLE_NAME }}
        source_bundle_name: ${{ env.INTUNE_SOURCE_BUNDLE_NAME }}

    # --- End Intune Packaging Steps ---

    # --- Start Artifact Upload Steps ---

    # - name: Upload MSIX package artifact (Optional)
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: MSIX Package (${{ matrix.configuration }}-${{ matrix.platform }}) V${{ steps.build_msix.outputs.app_version }}
    #     path: ${{ steps.build_msix.outputs.msix_path }}

    - name: Upload Intune Package Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        # Use the bundle name as the artifact name for clarity
        name: ${{ steps.package_intune_app.outputs.output_bundle_path }}
        # Upload the entire folder produced by the package-intune-app action
        path: ${{ steps.package_intune_app.outputs.output_bundle_path }}

    - name: Upload Intune Source Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package_intune_app.outputs.source_bundle_path }}
        path: ${{ steps.package_intune_app.outputs.source_bundle_path }}

    # --- End Artifact Upload Steps ---
