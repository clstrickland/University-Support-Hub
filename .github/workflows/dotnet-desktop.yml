# This workflow builds, tests (optional), signs, and packages a WinUI 3 desktop application
# into an MSIX package using the project file directly.

name: WinUI 3 MSIX Build

on:
  push:
    branches: [ "master" ] # Or your primary branch, e.g., master
  pull_request:
    branches: [ "master" ] # Or your primary branch

jobs:
  build:
    strategy:
      matrix:
        # Typically, you only need Release for MSIX distribution.
        # Add 'Debug' back if you need debug packages for testing.
        configuration: [Release]
        platform: [x64] # Add x86 or arm64 if you need to build for those platforms

    runs-on: windows-latest # Essential for Windows/WinUI builds

    env:
      # --- USER CONFIGURATION REQUIRED ---
      Solution_Name: SupportHubApp.sln             # Replace with your solution file name (needed for restore/test)
      Project_Path: SupportHubApp\SupportHubApp.csproj # *** Replace with the relative path to your WinUI 3 project file ***
      # Test_Project_Path: YourTestProject\YourTestProject.csproj # Optional: Replace with path to your test project if you have one. Remove the test step if not needed.
      # Target_Framework_Moniker: net8.0-windows10.0.19041.0 # Optional: Specify if needed, otherwise auto-detected. See notes below.
      # --- END USER CONFIGURATION ---

      # Variables derived from user config
      Project_Dir: ${{ github.workspace }}\SupportHubApp # Auto-derived base directory of the project (adjust if Project_Path is different)
      Certificate_File_Name: GitHubActionsWorkflow.pfx

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion if used, otherwise set to 1 for speed

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        # Ensure this matches the .NET version targeted by your WinUI 3 project
        dotnet-version: 8.0.311

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Optional: Execute unit tests if configured
    # - name: Execute unit tests
    #   if: env.Test_Project_Path != 'YourTestProject\YourTestProject.csproj' # Only run if path is configured
    #   run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}
      # Alternative using solution: run: dotnet test ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    # Restore NuGet packages for the solution
    - name: Restore NuGet packages
      run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=${{ matrix.configuration }}

    # Decode the Base64 encoded PFX certificate from secrets
    # Assumes you have secrets named Base64_Encoded_Pfx and Pfx_Key configured in your repo settings
    - name: Decode PFX certificate
      id: decode_pfx # Give step an ID if needed, though CERTIFICATE_PATH is set via GITHUB_ENV
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        # Ensure Project_Dir exists if needed before joining path
        New-Item -ItemType Directory -Force -Path $env:Project_Dir | Out-Null
        $certificatePath = Join-Path -Path $env:Project_Dir -ChildPath $env:Certificate_File_Name
        [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)
        echo "Decoded PFX certificate saved to $certificatePath"
        echo "CERTIFICATE_PATH=$certificatePath" >> $env:GITHUB_ENV

    # Build the WinUI 3 project and generate the MSIX package
    # This step uses the msbuild command structure you provided
    # Optional: Specify Output Path if needed, e.g., /p:AppxPackageDir="path\to\output"
    # Optional: Specify Target Framework if needed, e.g., /p:TargetFramework="$env:Target_Framework_Moniker"
    # Optional: Specify Runtime Identifier if needed, e.g., /p:RuntimeIdentifier="win-${{ matrix.platform }}"
    # /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}
    - name: Build project and create MSIX package
      id: build_msix # Add ID to reference outputs
      shell: pwsh # Use powershell for easier JSON parsing
      run: |
        Write-Host "CWD: $(Get-Location)"
        $msbuildArgs = @(
            "${{ env.Project_Path }}",
            "/t:Publish",
            "/p:Configuration=${{ matrix.configuration }}",
            "/p:Platform=${{ matrix.platform }}",
            "/p:_GenerateMsixPackage=true",
            "/p:AppxPackageSigningEnabled=true",
            "/p:PackageCertificateKeyFile=${{ env.CERTIFICATE_PATH }}",
            # Make sure Pfx_Key secret is configured if the PFX is password protected
            # "/p:PackageCertificatePassword=${{ secrets.Pfx_Key }}", # Uncomment if PFX has a password
            "/p:SelfContained=true",
            # Add flags to get properties and format as JSON for easy parsing
            "/getProperty:AppxPackageOutput",
            "/getProperty:AppxManifestIdentityVersion",
            "/nologo", # Suppress logo
            "/clp:NoSummary" # Suppress build summary for cleaner output
            # Optional: "/bl" # Creates a detailed binary log msbuild.binlog
        )

        Write-Host "Running MSBuild: msbuild $($msbuildArgs -join ' ')"

        # Execute msbuild and capture stdout
        $msbuildOutput = msbuild $msbuildArgs | Out-String

        Write-Host "MSBuild Output:"
        Write-Host $msbuildOutput

        try {
            $buildProps = $msbuildOutput | ConvertFrom-Json -ErrorAction Stop

            # Extract the specific properties
            $msixPath = $buildProps.Properties.AppxPackageOutput
            $appVersion = $buildProps.Properties.AppxManifestIdentityVersion

            if (-not $msixPath -or -not $appVersion) {
                Write-Error "Failed to parse required properties (AppxPackageOutput, AppxManifestIdentityVersion) from MSBuild JSON output."
                exit 1
            }
            
            $projectRelativeDir = Split-Path '${{ env.Project_Path }}' # Gets "SupportHubApp" from "SupportHubApp\SupportHubApp.csproj"
            $projectFullPath = Join-Path $env:GITHUB_WORKSPACE $projectRelativeDir
            $msixAbsolutePath = Join-Path $projectFullPath $msixPath
            
            # Output the necessary values for subsequent steps
            Write-Host "MSIX Path Property: $msixPath"
            Write-Host "MSIX Absolute Path: $msixAbsolutePath"
            Write-Host "App Version Property: $appVersion"
            echo "msix_path=$msixPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            echo "app_version=$appVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } catch {
            Write-Error "Could not parse MSBuild output as JSON. Error: $_"
            exit 1
        }



    - name: Remove PFX certificate file
      if: always() # Run even if build fails to ensure cleanup
      run: Remove-Item -Path "${{ env.CERTIFICATE_PATH }}" -Force -ErrorAction SilentlyContinue


    - name: Create IntuneWin Package using MSIX-IntuneWin-Packager action
      id: create_intunewin # Give step an ID to access its output
      uses: clstrickland/MSIX-IntuneWin-Packager@v0.2.2 # Use a specific version for stability
      with:
        # Pass the outputs from the build_msix step
        msix_file_path: ${{ steps.build_msix.outputs.msix_path }}
        app_version: ${{ steps.build_msix.outputs.app_version }}


    # Upload the generated MSIX package (Optional - keep if you still need the raw MSIX)
    - name: Upload MSIX package artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package (${{ matrix.configuration }}-${{ matrix.platform }}) V${{ steps.build_msix.outputs.app_version }}
        # Use the exact path from build output - safer than wildcards
        path: ${{ steps.build_msix.outputs.msix_path }}

    # Upload the generated IntuneWin package artifact
    - name: Upload IntuneWin package artifact
      uses: actions/upload-artifact@v4
      with:
        name: IntuneWin Package (${{ matrix.configuration }}-${{ matrix.platform }}) V${{ steps.build_msix.outputs.app_version }}
        # Use the output path from the create_intunewin step
        path: ${{ steps.create_intunewin.outputs.intunewin_file_path }} # This comes from your custom action's output
